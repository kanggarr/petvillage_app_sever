const Message = require('../models/messages');
const Chatroom = require('../models/chatroom'); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import
const User = require('../models/user');     // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import
const Shop = require('../models/shop');     // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import
const mongoose = require('mongoose');
const { login } = require('./authController');
const getMessagesRoomByUser = async (req, res) => {
  try {
    const { roomId } = req.params;
    const { page = 1, limit = 20 } = req.query;

    const messages = await Message.find({ roomId })
      .sort({ timestamp: -1 }) // ‡∏î‡∏∂‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
      .skip((page - 1) * limit)
      .limit(Number(limit));

    res.json(messages.reverse()); // ‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏•‡πà‡∏≤‡∏á
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
};

const createMessage = async (req, res) => {
  try {
    const { roomId, sender, senderType, content } = req.body;

    if (!roomId || !sender || !senderType || !content) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sender ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏´‡∏°
    if (senderType === 'User') {
      const user = await User.findOne({ username: sender });
      if (!user) return res.status(400).json({ error: 'User not found' });
    } else if (senderType === 'Shop') {
      const shop = await Shop.findOne({ shopName: sender });
      if (!shop) return res.status(400).json({ error: 'Shop not found' });
    } else {
      return res.status(400).json({ error: 'Invalid senderType' });
    }

    const newMessage = new Message({ roomId, sender, senderType, content });
    const saved = await newMessage.save();

    res.status(201).json(saved);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
};


const getLatestMessageByRoom = async (req, res) => {
  try {
    const { roomId } = req.params;

    const latest = await Message.findOne({ roomId })
      .sort({ timestamp: -1 });

    res.json(latest);
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
};


const createChatRoom = async (req, res) => {
  try {
    const { userId, shopId } = req.body;

    // üîç Validate input
    if (!userId || !shopId) {
      return res.status(400).json({ error: 'userId and shopId are required' });
    }

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: 'Invalid userId' });
    }

    if (!mongoose.Types.ObjectId.isValid(shopId)) {
      return res.status(400).json({ error: 'Invalid shopId' });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    const shop = await User.findById(shopId);
    if (!shop) {
      return res.status(404).json({ error: 'Shop not found' });
    }

    // üîÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const result = await Chatroom.findOne({
      user: new mongoose.Types.ObjectId(userId),
      shop: new mongoose.Types.ObjectId(shopId)
    });

    if (result) {
      return res.status(400).json({ error: 'Chat room already exists' });
    }



    // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
    const newRoom = new Chatroom({
      roomName: 'New Chat',
      user,
      shop
    });

    await newRoom.save();

    return res.status(201).json(newRoom);
  } catch (err) {
    console.error('Error creating chat room:', err);
    return res.status(500).json({ error: 'Server error' });
  }
};

const getChatRoomByUser = async (req, res) => {
  try {
    const { userId } = req.query;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userId) {
      return res.status(400).json({ error: 'userId is required' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà valid ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: 'Invalid userId' });
    }

    const rooms = await Chatroom.find({ user: userId })
      .populate({path: 'user', select: 'username id'})
      .populate({path: 'shop', select: 'username id'}) // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      .sort({ updatedAt: -1 });

    res.json(rooms);
  } catch (err) {
    console.error('getChatRoomByUser error:', err);
    res.status(500).json({ error: 'Server error' });
  }
};

// ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
const getChatRoomByShop = async (req, res) => {
  try {
    const { shopId } = req.query;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ shopId ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!shopId) {
      return res.status(400).json({ error: 'shopId is required' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ shopId ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ó‡∏µ‡πà valid ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!mongoose.Types.ObjectId.isValid(shopId)) {
      return res.status(400).json({ error: 'Invalid shopId' });
    }

    const rooms = await Chatroom.find({ shop: shopId })
      .populate({path: 'user', select: 'username id'})
      .populate({path: 'shop', select: 'username id'}) // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
      .sort({ updatedAt: -1 });

    res.json(rooms);
  } catch (err) {
    console.error('getChatRoomByShop error:', err);
    res.status(500).json({ error: 'Server error' });
  }
};

module.exports = {
  getMessagesRoomByUser,
  createMessage,
  getLatestMessageByRoom,
  createChatRoom,
  getChatRoomByUser,
  getChatRoomByShop
};