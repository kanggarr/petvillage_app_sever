const mongoose = require('mongoose');
const Shop = require('../models/shop');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const nodemailer = require('nodemailer');

// üìå Multer setup
const upload = multer({ dest: 'temp_uploads/' });
const uploadSingle = upload.single('businessLicense');

//Data
const Province = require('../models/provincemodel');
const District = require('../models/districtmodel');
const Subdistrict = require('../models/subdistrict');

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

// üì§ Email sender setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// TempShop Schema (inline)
const tempShopSchema = new mongoose.Schema({
  shopName: String,
  email: String,
  password: String,
  address: String,
  shop_province: String,
  shop_district: String,
  shop_subdistrict: String,
  otp: String,
  otpExpires: Date,
}, { timestamps: true });

const TempShop = mongoose.model('TempShop', tempShopSchema);


// üì© Register Shop (Send OTP)
const registerShop = async (req, res) => {
  try {
    const { shopName, email, password, address, shop_province, shop_district, shop_subdistrict } = req.body;

    if (!shopName || !email || !password || !address || !shop_province || !shop_district || !shop_subdistrict) {
      return res.status(400).json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const existing = await Shop.findOne({ email });
    if (existing) return res.status(400).json({ msg: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });

    await TempShop.deleteMany({ email });

    const hashedPassword = await bcrypt.hash(password, 10);
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + 5 * 60 * 1000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

    const tempShop = new TempShop({
      shopName,
      email,
      password: hashedPassword,
      address,
      shop_province,
      shop_district,
      shop_subdistrict,
      otp,
      otpExpires
    });

    await tempShop.save();

    const mailOptions = {
      from: `" [Pet Village] - ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Pet Village Verification)" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "Pet Village: ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤",
      html: `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì <b>${shopName}</b>,</p>
        <p>&nbsp; &nbsp; &nbsp;‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ Pet Village
          <br><br> ‡πÇ‡∏õ‡∏£‡∏î‡∏ô‡∏≥‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <b>5 ‡∏ô‡∏≤‡∏ó‡∏µ</b>)</p>
        <h3>&nbsp; &nbsp; &nbsp;‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏Ñ‡∏∑‡∏≠ ${otp}</h3> <br>
        <p>‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà contact@pet_village.com ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 02-339-4200</p>
      `
    };

    await transporter.sendMail(mailOptions);

    return res.status(200).json({ msg: "‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });

  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô:", err);
    return res.status(500).json({ msg: "Server error" });
  }
};

// üì© ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡πâ‡∏≤‡∏ô + ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const verifyShopOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    const file = req.file;

    if (!email || !otp || !file) return res.status(400).json({ msg: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ OTP ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå" });

    const tempShop = await TempShop.findOne({ email });
    if (!tempShop) return res.status(404).json({ msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });

    if (tempShop.otp !== otp) return res.status(400).json({ msg: "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    if (tempShop.otpExpires < new Date()) {
      await TempShop.deleteOne({ email });
      return res.status(400).json({ msg: "OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }

    const provinceData = await Province.findOne({ name_th: tempShop.shop_province });
    const districtData = await District.findOne({ name_th: tempShop.shop_district, province_id: provinceData.id });
    const subdistrictData = await Subdistrict.findOne({ name_th: tempShop.shop_subdistrict, district_id: districtData.id });

    if (!provinceData || !districtData || !subdistrictData) {
      return res.status(400).json({ msg: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const shop = new Shop({
      shopName: tempShop.shopName,
      email: tempShop.email,
      password: tempShop.password,
      address: tempShop.address,
      shop_province: provinceData._id,
      shop_district: districtData._id,
      shop_subdistrict: subdistrictData._id,
      businessLicense: [],
      status: 'pending',
      role: 'shop'
    });

    await shop.save();

    const shopDir = path.join(__dirname, '..', 'uploads', shop._id.toString());
    if (!fs.existsSync(shopDir)) fs.mkdirSync(shopDir, { recursive: true });

    const ext = path.extname(file.originalname);
    const newFileName = `license${ext}`;
    const newPath = path.join(shopDir, newFileName);
    fs.renameSync(file.path, newPath);

    shop.businessLicense = [`/uploads/${shop._id}/${newFileName}`];
    await shop.save();

    await TempShop.deleteOne({ email });

    return res.status(201).json({ msg: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß", shopId: shop._id });

  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:", err);
    return res.status(500).json({ msg: "Server error" });
  }
};

// üîë ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
const loginShop = async (req, res) => {
  try {
    const { email, password } = req.body;

    const shop = await Shop.findOne({ email });
    if (!shop) return res.status(400).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ' });

    const isMatch = await bcrypt.compare(password, shop.password);
    if (!isMatch) return res.status(401).json({ msg: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const token = jwt.sign({ shopId: shop._id, role: 'shop' }, JWT_SECRET, { expiresIn: '7d' });

    res.json({ token, shop: { id: shop._id, shopName: shop.shopName, email: shop.email } });
  } catch (error) {
    res.status(500).json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};

// üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å token
const getCurrentShop = async (req, res) => {
  try {
    const shop = await Shop.findById(req.shopId).select('-password');
    if (!shop) return res.status(404).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤' });
    res.json(shop);
  } catch (error) {
    res.status(500).json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error: error.message });
  }
};

module.exports = {
  registerShop,
  verifyShopOTP,
  loginShop,
  getCurrentShop,
  uploadSingle
};
