require('dotenv').config();
const User = require('../models/user');
const Shop = require('../models/shop');
const Province = require('../models/provincemodel');
const District = require('../models/districtmodel');
const Subdistrict = require('../models/subdistrict');
const TempUser = require('../models/tempuser');
const ForgetPassword = require('../models/forgetpassword');
const resetOTP = require('../models/resetOTP');
const bcrypt = require('bcryptjs');
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const multer = require('multer');
const path = require('path');
const { log } = require('console');
const mongoose = require('mongoose');



// Multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
const storage = multer.diskStorage({
  // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  destination: (req, file, cb) => {
    cb(null, 'uploads/businessLicense/');
  },
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡πà‡∏≠ .extension
  filename: (req, file, cb) => {
    // ‡πÄ‡∏≠‡∏≤‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    const ext = path.extname(file.originalname); // ‡πÄ‡∏ä‡πà‡∏ô '.jpg'
    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: fieldname-timestamp.ext
    const filename = `${file.fieldname}-${Date.now()}${ext}`;
    cb(null, filename);
  },
});


const imageFilter = (req, file, cb) => {
  if (!file.mimetype.startsWith('image/')) {
    return cb(new Error('Only image files are allowed!'), false);
  }
  cb(null, true);
};

const upload = multer({ storage })

const uploadSingle = upload.single('businessLicense');



// üì§ Email sender setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

const register = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    if (!username?.trim() || !email?.trim() || !password?.trim()) {
      return res.status(400).json({ msg: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ msg: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res.status(400).json({ msg: "‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‡∏•‡πâ‡∏≤‡∏á temp ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    await TempUser.deleteMany({ email });

    const hashedPassword = await bcrypt.hash(password, 10);
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + 5 * 60 * 1000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

    const tempUser = new TempUser({
      username,
      email,
      password: hashedPassword,
      otp,
      otpExpires,
    });

    await tempUser.save();

    const mailOptions = {
      from: `" [Pet Village] - ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Pet Village Verification)" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "Pet Village: ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
      html: `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì <b>${username}</b>,</p>
        <p>&nbsp; &nbsp; &nbsp;‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Pet Village
        <br><br> ‡πÇ‡∏õ‡∏£‡∏î‡∏ô‡∏≥‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <b>5 ‡∏ô‡∏≤‡∏ó‡∏µ</b>)</p>
        <h3>&nbsp; &nbsp; &nbsp;‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏Ñ‡∏∑‡∏≠ ${otp}</h3> <br>
        <p>‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà contact@pet_village.com ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 02-339-4200</p>
      `
    };



    //  email sender
    if (Boolean(process.env.ENABLE_EMAIL)) {

      await transporter.sendMail(mailOptions);

    }



    return res.status(200).json({ msg: "‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });

  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:", error);
    return res.status(500).json({ msg: "Server error" });
  }
};

const registerShop = async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {

    // 1. ‡∏î‡∏∂‡∏á input parameters
    const {
      shopName,
      email,
      password,
      address,
      shop_province,
      shop_district,
      shop_subdistrict
    } = req.body;
    const file = req.file;

    // 2. validate input
    if (
      !shopName?.trim() ||
      !email?.trim() ||
      !password?.trim() ||
      !address?.trim() ||
      !shop_province?.trim() ||
      !shop_district?.trim() ||
      !shop_subdistrict?.trim() ||
      !file
    ) {
      return res
        .status(400)
        .json({ msg: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    const emailRegex =
      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ msg: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // 3. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥ email ‡∏´‡∏£‡∏∑‡∏≠ shopName
    const existingUser = await User.findOne({
      $or: [{ email }, { username: shopName }],
    });

    if (existingUser) {
      return res
        .status(400)
        .json({ msg: '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
    }

    const province = await Province.findOne({ name_th: shop_province });
    if (!province) {
      return res.status(400).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ' });
    }
    const district = await District.findOne({ name_th: shop_district });
    if (!district) {
      return res.status(400).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ô‡∏µ‡πâ' });
    }
    const subdistrict = await Subdistrict.findOne({ name_th: shop_subdistrict });
    if (!subdistrict) {
      return res.status(400).json({ msg: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡∏ö‡∏•‡∏ô‡∏µ‡πâ' });
    }

    // 4. ‡πÅ‡∏Æ‡∏ä‡∏û‡∏≤‡∏™‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
    const hashedPassword = await bcrypt.hash(password, 10);

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô transaction
    const newUser = await User.create([{
      username: shopName,
      email,
      password: hashedPassword,
      isVerified: false,
      role: 'shop',
    }], { session });

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Shop ‡πÉ‡∏ô transaction
    await Shop.create([{
      owner: newUser[0]._id,
      shopName,
      email,
      address,
      shop_province: province,
      shop_district: district,
      shop_subdistrict: subdistrict,
      businessLicensePath: file.path,
      isApproved: false,
    }], { session });

    // 4. commit ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô
    await session.commitTransaction();
    session.endSession();

    return res.status(200).json({
      msg: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
    });
  } catch (err) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ abort transaction
    await session.abortTransaction();
    session.endSession();
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô:', err);
    return res.status(500).json({ msg: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
  }
};


const verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;

    if (!email?.trim() || !otp?.trim()) {
      return res.status(400).json({ msg: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞ OTP" });
    }

    const tempUser = await TempUser.findOne({ email });
    if (!tempUser) {
      return res.status(404).json({ msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });
    }

    if (tempUser.otp !== otp) {
      return res.status(400).json({ msg: "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    if (tempUser.otpExpires < new Date()) {
      await TempUser.deleteOne({ email });
      return res.status(400).json({ msg: "OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏à‡∏£‡∏¥‡∏á
    const newUser = new User({
      username: tempUser.username,
      email: tempUser.email,
      password: tempUser.password,
      isVerified: true,
      role: 'user'
    });

    await newUser.save();
    await TempUser.deleteOne({ email });

    return res.status(201).json({ msg: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });

  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP:", error);
    return res.status(500).json({ msg: "Server error" });
  }
};

const resendOTP = async (req, res) => {
  try {
    const { email } = req.body;

    const tempUser = await TempUser.findOne({ email });
    if (!tempUser) return res.status(404).json({ msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á OTP ‡πÉ‡∏´‡∏°‡πà
    const newOTP = Math.floor(100000 + Math.random() * 900000).toString();
    const newExpiry = new Date(Date.now() + 5 * 60 * 1000);

    tempUser.otp = newOTP;
    tempUser.otpExpires = newExpiry;
    await tempUser.save();

    const mailOptions = {
      from: `"‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà",
      html: `
        <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</p>
        <h2>${newOTP}</h2>
        <p>‡∏£‡∏´‡∏±‡∏™‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ</p>
      `
    };

    await transporter.sendMail(mailOptions);

    res.status(200).json({ msg: "‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà:", err);
    res.status(500).json({ msg: "Server error" });
  }
};

const login = async (req, res) => {
  try {

    const { email, password } = req.body;

    //validate input
    if (!email?.trim() || !password?.trim()) {
      res.status(400);
      return res.status(400).json({ msg: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
    }
    // validate user
    const user = await User.findOne({ email }).select('+password');

    if (!user) {
      res.status(404);
      return res.status(400).json({ msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ" });
    }



    //compare password with hashedpassword
    if (user && (await bcrypt.compare(password, user.password))) {
      if (user.role == 'shop' && !user.isVerified) {
        return res.status(403).json({ msg: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" });
      }
      const accessToken = jwt.sign({
        user: {
          username: user.username,
          email: user.email,
          id: user.id,
          role: user.role
        }
      },
        process.env.TOKEN_SECRET,
        { expiresIn: "10m" }
      );
      const refreshToken = jwt.sign({
        user: {
          id: user.id,
          role: "refresh"
        }
      },
        process.env.TOKEN_SECRET,
        { expiresIn: "1d" }
      );
      // ‚úÖ ‡∏™‡πà‡∏á user object (‡∏ï‡∏±‡∏î password) ‡πÅ‡∏•‡∏∞ roomId ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ client
      const userResponse = {
        _id: user._id,
        username: user.username,
        email: user.email,
        role: user.role,
      };

      return res.status(200).json({
        msg: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        token: accessToken,
        refreshToken: refreshToken,
        user: userResponse,
        roomId: user.roomId, // üü¢ ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ field ‡∏ä‡∏∑‡πà‡∏≠ roomId
      });
    } else {
      return res.status(401).json({ msg: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }
  } catch (error) {
    console.error("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö :", error);
    res.status(500).json({ error: error.message });
  }
};

const refreshToken = async (req, res) => {
  try {

    const { token } = req.body;

    //validate input
    if (!token?.trim()) {
      return res.status(401).json({ msg: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô" });
    }

    //  Decode token 
    const decoded = jwt.verify(token, process.env.TOKEN_SECRET);

    let id = decoded.user.id

    const user = await User.findById(id)

    const accessToken = jwt.sign({
      user: {
        username: user.username,
        email: user.email,
        id: user.id,
        role: user.role
      }
    },
      process.env.TOKEN_SECRET,
      { expiresIn: "10m" }
    );

    return res.status(200).json({ token: accessToken })

  } catch (error) {
    console.error("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô :", error);
    res.status(500).json({ error: error.message });
  }
};

const forgetPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const otpExpires = new Date(Date.now() + 5 * 60 * 1000);

    await resetOTP.deleteMany({ email });

    await resetOTP.create({ email, otp, otpExpires });

    await transporter.sendMail({
      from: `" [Pet Village] - ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Pet Village Verification)" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "Pet Village: ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
      html: `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì <b>${username}</b>,</p>
        <p>&nbsp; &nbsp; &nbsp;‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô Pet Village
          <br><br> ‡πÇ‡∏õ‡∏£‡∏î‡∏ô‡∏≥‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <b>5 ‡∏ô‡∏≤‡∏ó‡∏µ</b>)</p>
        <h3>&nbsp; &nbsp; &nbsp;‡∏£‡∏´‡∏±‡∏™ (OTP) ‡∏Ñ‡∏∑‡∏≠ ${otp}</h3> <br>
        <p>‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤‡∏ó‡∏µ‡πà contact@pet_village.com ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 02-339-4200</p>`
    });

    return res.status(200).json({ message: '‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß' });

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// --- VERIFY RESET OTP ---
const verifyResetOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;

    const entry = await resetOTP.findOne({ email });
    if (!entry) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ' });
    if (entry.otp !== otp) return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    if (entry.otpExpires < new Date()) {
      await resetOTP.deleteOne({ email });
      return res.status(400).json({ message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏' });
    }

    return res.status(200).json({ message: 'OTP ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

// --- RESET PASSWORD ---
const resetPassword = async (req, res) => {
  try {
    const { email, password } = req.body;

    const entry = await resetOTP.findOne({ email });
    if (!entry) return res.status(404).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏Å‡πà‡∏≠‡∏ô' });

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });

    user.password = await bcrypt.hash(password, 10);
    await user.save();
    await resetOTP.deleteOne({ email });

    res.json({ message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

module.exports = {
  register,
  registerShop,
  verifyOTP,
  resendOTP,
  login,
  refreshToken,
  forgetPassword,
  verifyResetOTP,
  resetPassword,
  uploadSingle
};