require('dotenv').config();
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');

const Province = require('./models/provincemodel');
const District = require('./models/districtmodel');
const Subdistrict = require('./models/subdistrict');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const readJsonFile = (filePath) => {
  try {
    const data = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, err.message);
    process.exit(1);
  }
};

const provinces = readJsonFile('./data/province.json');
const districts = readJsonFile('./data/district.json');
const subdistricts = readJsonFile('./data/subdistrict.json');

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => {
  console.log('‚úÖ MongoDB connected');
  importData();
})
.catch(err => {
  console.error('‚ùå MongoDB connection failed:', err);
  process.exit(1);
});

process.on('unhandledRejection', err => {
  console.error('‚ùå Unhandled rejection:', err);
  process.exit(1);
});

async function importData() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ import...');

  try {
    await Province.deleteMany();
    await District.deleteMany();
    await Subdistrict.deleteMany();
    console.log('üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');

    const provinceIdMap = {};
    const districtIdMap = {};

    console.log(`üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏° import province (${provinces.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
    for (const p of provinces) {
      const newProvince = new Province({ name_th: p.name_th, name_en: p.name_en });
      const savedProvince = await newProvince.save();
      provinceIdMap[p.id] = savedProvince._id;
    }
    console.log('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£ import provinces');

    console.log(`üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏° import district (${districts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
    for (const d of districts) {
      const mappedProvinceId = provinceIdMap[d.province_id];
      if (!mappedProvinceId) {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö province_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö district: ${d.name_th} (id: ${d.province_id})`);
        continue;
      }

      const newDistrict = new District({
        name_th: d.name_th,
        name_en: d.name_en || '',
        province_id: mappedProvinceId
      });
      const savedDistrict = await newDistrict.save();
      districtIdMap[d.id] = savedDistrict._id;
    }
    console.log('‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£ import districts');

    console.log(`üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏° import subdistrict (${subdistricts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`);
    let skipped = 0;
    for (const s of subdistricts) {
      const mappedDistrictId = districtIdMap[s.district_id];

      if (!mappedDistrictId) {
        console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö district_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö subdistrict: ${s.name_th} (id: ${s.district_id})`);
        skipped++;
        continue;
      }

      if (!s.name_en || !s.zip_code) {
        console.warn(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö subdistrict:`, s);
        skipped++;
        continue;
      }

      try {
        const newSubdistrict = new Subdistrict({
          name_th: s.name_th,
          name_en: s.name_en,
          zip_code: s.zip_code,
          district_id: mappedDistrictId
        });
        await newSubdistrict.save();
      } catch (err) {
        console.error(`‚ùå Error saving subdistrict: ${s.name_th}`, err.message);
        skipped++;
      }
    }

    console.log(`‚úÖ Import ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (Skipped ${skipped} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ subdistrict)`);
    process.exit();
  } catch (err) {
    console.error('‚ùå Error importing data:', err);
    process.exit(1);
  }
}
